*****没有BOM时 必须指定 #encoding: utf-8 标识脚本的编码 才能加utf8注释
*****有BOM时 可以不加
1.manual
    example: shutil
    help(shutil)    -- in pdb : pp help(shutil)
    shutil.__all__  -- same in pdb
    shutil.__doc__  -- same in pdb
2.Queue
    import Queue, threading
    The Queue module implements multi-producer, multi-consumer queues.see the threading module.
    FIFO,LIFO,PriorityQueue
    Queue.get([block[, timeout]])
    Queue.put(item[, block[, timeout]])
    Queue.task_done()
    Queue.join()

3.lxml
    import xml.etree.ElementTree as ET            -- error?
    import xml.dom.minidom as minidom
    from lxml import etree as ET
    etree.parse()
    doc = ET.parse(filename)
    doc.getroot().attrib['width'] = '1600px';   -- change attribute
    在布尔上下文中，如果 ElementTree 元素对象不包含子元素（即如果 len(element) 为 0），则其值会被认为是 False 。这就意味着 if element.find('...') 并非在测试是否 find() 方法找到了匹配项；而是在测试匹配的元素是否包含子元素！想要测试 find() 方法是否返回了某个元素的话，需要使用 if element.find('...') is not None
    
4.print class info
    class Friend():
    def __init__(self, name):
    self.name = name

    def __str__(self):
    return "Friend : %s" % self.name

    if __name__ == '__main__':
    friend = Friend('Liang')
    print friend
    output >> Friend name : Liang

5 Python os.path模块
    http://hi.baidu.com/1234lylp/item/a1d8e140707222e6a4c066c7
    os.path.abspath(path)
    返回path规范化的绝对路径。
    >>> os.path.abspath('test.csv')             #'C:\\Python25\    est.csv'
    >>> os.path.abspath('c:\    est.csv')       #'c:\    est.csv'
    >>> os.path.abspath('../csv\    est.csv')   #'C:\\csv\    est.csv'

    os.path.split(path)
    将path分割成目录和文件名二元组返回。
    >>> os.path.split('c:\\csv\    est.csv')    #('c:\\csv', 'test.csv')
    >>> os.path.split('c:\\csv\\')              #('c:\\csv', '')

    os.path.dirname(path)
    返回path的目录。其实就是os.path.split(path)的第一个元素。
    >>> os.path.dirname('c:\\csv    est.csv')   #'c:\\'
    >>> os.path.dirname('c:\\csv')              #'c:\\'

    os.path.basename(path)
    返回path最后的文件名。如何path以／或\结尾，那么就会返回空值。即os.path.split(path)的第二个元素。
    >>> os.path.basename('c:\    est.csv')      #'test.csv'
    >>> os.path.basename('c:\\csv')             #'csv' （这里csv被当作文件名处理了）
    >>> os.path.basename('c:\\csv\\')           #''

    os.path.commonprefix(list)
    返回list中，所有path共有的最长的路径。
    如：
    >>> os.path.commonprefix(['/home/td','/home/td/ff','/home/td/fff'])          #'/home/td'

    os.path.exists(path)
    如果path存在，返回True；如果path不存在，返回False。
    >>> os.path.exists('c:\\')                                                     #True
    >>> os.path.exists('c:\\csv\    est.csv')                                    #False

    os.path.isabs(path)
    如果path是绝对路径，返回True。

    os.path.isfile(path)
    如果path是一个存在的文件，返回True。否则返回False。
    >>> os.path.isfile('c:\\boot.ini')                                            #True
    >>> os.path.isfile('c:\\csv\    est.csv')                                    #False
    >>> os.path.isfile('c:\\csv\\')                                                #False

    os.path.isdir(path)
    如果path是一个存在的目录，则返回True。否则返回False。
    >>> os.path.isdir('c:\\')                                                    #True
    >>> os.path.isdir('c:\\csv\\')                                                #False
    >>> os.path.isdir('c:\\windows\    est.csv')                                #False

    os.path.join(path1[, path2[, ...]])
    将多个路径组合后返回，第一个绝对路径之前的参数将被忽略。
    >>> os.path.join('c:\\', 'csv', 'test.csv')                                    #'c:\\csv\    est.csv'
    >>> os.path.join('windows    emp', 'c:\\', 'csv', 'test.csv')                    #'c:\\csv\    est.csv'
    >>> os.path.join('/home/aa','/home/aa/bb','/home/aa/bb/c')                    #'/home/aa/bb/c'

    os.path.normcase(path)
    在Linux和Mac平台上，该函数会原样返回path，在windows平台上会将路径中所有字符转换为小写，并将所有斜杠转换为饭斜杠。
    >>> os.path.normcase('c:/windows\\system32\\')                                #'c:\\windows\\system32\\'

    os.path.normpath(path)
    规范化路径。
    >>> os.path.normpath('c://windows\\System32\\../Temp/')                        #'c:\\windows\    emp'

    os.path.splitdrive(path)
    >>> os.path.splitdrive('c:\\windows')                                        #('c:', '\\windows')

    os.path.splitext(path)
    >>> os.path.splitext('c:\\csv\    est.csv')                                    #('c:\\csv\    est', '.csv')
     
    os.path.getsize(path)
    返回path的文件的大小（字节）。

    >>> os.path.getsize('c:\\boot.ini')                                            #299L
    
6.if file_list: 判断list 是否为空
7.xml 打开
    try:
      doc_org = ET.parse(filename)
    except:
      info = 'Error: can not parse:%s\n' % filename
      error_log.write(info)
      raise
      xml 插入说明 会覆盖原来的
    pi = ET.ProcessingInstruction(
        'xml-stylesheet',
        'type="text/css" href="%s"' % ('./customcolors.css')
        )
    root.getroot().addprevious(pi)
    root.write(name, pretty_print = True)
    判断是否找到节点
    process_node = doc.find(r'process')
    if None != process_node:
8.生成路径，不存在创建
    tmp_path = os.path.join(options.outdir, 'TMP')
    if not os.path.exists(tmp_path):
        os.makedirs(tmp_path)

9.字符串切割成列表
    self.set_ids = process_node.attrib['set_id'].split(' ')  

10.转为数字，默认为0，不知会否抛异常
    prod = int(id_node.get('prodtype', '0'))

411遍历子节点方法
        xpath = 'asset/DiCi/%s' % (self.region)
        subdcas = doc.find(xpath)
        if subdcas:
          for dca in subdcas:
            id = dca.attrib['id']
12.获取当前脚本的路径
path_tools = os.path.dirname(os.path.abspath(__file__))   

13. 列表可以存入字符或方法
    PROCESS_MAP = {} 列表
    PROCESS_MAP[counter.auto_inc()] = 'Start Processing Phase1 from this step'
    PROCESS_MAP[counter.auto_inc()] = make_output_dir     
    使用时要根据内容类型分别处理使用isinstance
    for key, fun in PROCESS_MAP.iteritems():
        if isinstance(fun, FunctionType):
            print '\t%s\t%s' %(key, fun.__name__)
        elif isinstance(fun, str):
            print '\t%s\t%s' % (key, fu)

14.python 靠对齐，tab等于8个空格，最好使用spacs对齐
15.对于emacs 的rope,代码不能有中文,即使是utf8格式
16.标识编码，之一冒号必须紧跟着
    #!/usr/bin/env python
    #coding: utf-8
    #encoding: utf-8

17.
    一些windows 功能需要安装 pywin32
    import win32con, win32api
    # create a file, just to show how to manipulate it
    thefile = 'test'
    f = open('test', 'w')
    f.close( )
    # to make the file hidden...:
    win32api.SetFileAttributes (thefile, win32con.FILE_ATTRIBUTE_HIDDEN)
    # to make the file readonly:
    win32api.SetFileAttributes(thefile, win32con.FILE_ATTRIBUTE_READONLY)
    # to be able to delete the file we need to set it back to normal:
    win32api.SetFileAttributes(thefile, win32con.FILE_ATTRIBUTE_NORMAL)
    # and finally we remove the file we just made 
    os.remove(thefile)
    ----issue----
    doc             :   http://ASPN.ActiveState.com/ASPN/Python/Reference/Products/ActivePython/PythonWin32Extensions/win32file.html
    setup error     :   ImportError: DLL load failed: 找不到指定的模块  (http://huangliangnumber1.blog.163.com/blog/static/47811748201142264938177/)
    C:\Python26\Lib\site-packages\pywin32_system32\*   == > C:\Windows\System32

18.
    pdb 调试 python 添加的参数直接 加载后面
    python -i -m pdb --annotate=3 test.py argv[0]

19.
    http://blog.csdn.net/lanphaday/article/details/1483728
    使用profile 模块可以得到程序统计信息
    import profile
    profile.run("main()", "run.log")
    python -m profile  profile_t.py
    python -m cProfile profile_t.py

20.
    multiprocessing 多进程模块

21.编码
    utf16
    你 0x4f63
    文件中 向右为高
    unicode Big Endian      高位存在低字节 FEFF    4f6e    UCS-2
    unicode Little Endian   低位存在高字节 FFFE    6e4f    UCS-2
    utf8 单字节编码 有字节0开始，多字节编码首字节1格式代表 几个字节，之后使用10开头
    例   〇 E3 80 87（1110 0011）
        Č   c4 8c（1100）

22.
    list  遍历
        for i in list:
            print i
        如果元素为tuple
        for i,j in list:
            print i,j
    dict  遍历
        for k in dict.iterkeys():
            print k         # 查看有什么key
            print dict["key1"], dict["key2"]
            print dict.key1, dict.key2
23
    type(x) 可查看类型
    isinstance(object, classinfo) 测试是否是这个类型 例isinstance(1, int)

    python 中string 包含两种 str 和 unicode
    内部使用unicode，
    任何string 包含 encode()    unicode -> str
                    decode()    str -> unicode
    参数是字符串的编码 或是要转出的字符串编码
24
    python 包管理工具easy_install或者pip
    setuptools-0.6c11 for python 2.6
    easy_install.exe pip
    example: pip install pygal
    easy_install的用法：
    1） 安装一个包
     $ easy_install <package_name>
     $ easy_install "<package_name>==<version>"
    2) 升级一个包
     $ easy_install -U "<package_name>>=<version>"
    pip的用法
    1) 安装一个包
     $ pip install <package_name>
     $ pip install <package_name>==<version>
    2) 升级一个包 (如果不提供version号，升级到最新版本）
     $ pip install --upgrade <package_name>>=<version>
    3）删除一个包
     $ pip uninstall <package_name> 
     
25
    svg     (https://code.google.com/p/svgfig/
            https://code.google.com/p/svgplotlib/
            http://pythonhosted.org/svgwrite/
            https://pypi.python.org/pypi/svglib/                load svg file and convert it to pdf with other tools
            http://savannah.nongnu.org/projects/things/         Things is a Retained-Mode Canvas Animation API
            http://mensch.org/simpleSVG/                        draw image with svg
            https://github.com/btel/svg_utils                   no use
            http://www.cell-game.com/page.php?s=jav_blog&p=6    altsci cell --  a env about svg
            http://www.cairographics.org/cookbook/librsvgpython/ about cairo 
            https://pypi.python.org/pypi/eea.converter/1.0      This package provides utilities to convert images and PDF files using ImageMagick.
            librsvg http://mirrors.kernel.org/sourceware/cygwin/x86/release/librsvg2/    use in linux
            )
            http://www.open-open.com/lib/view/open1367482261390.html     open source project map
    pySVG   例子不完整，个版本接口差异大，没有相应的文档
        pip install --upgrade pysvg==0.2.1          -- testgtd.py testParser.py testturtle.py
        http://pydoc.net/Python/pysvg/0.2.1/pysvg.parser/
        https://code.google.com/p/pysvg/source/browse/trunk/?r=26#trunk%2FpySVG%2Fsrc%2Ftests%2Ftestoutput
    pygal -- draw chart using svg       : http://pygal.org/             
    cairosvg -- convert svg to png --依赖 pycairo, test failed
        安装pycairo
        http://www.crifan.com/python_cairo_module_pycairo/
        linux http://cairographics.org/pycairo/
        windows http://www.lfd.uci.edu/~gohlke/pythonlibs/#pycairo